// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/events.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SendEventClient is the client API for SendEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendEventClient interface {
	RequestMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Status, error)
	FindEvents(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FindResponse, error)
}

type sendEventClient struct {
	cc grpc.ClientConnInterface
}

func NewSendEventClient(cc grpc.ClientConnInterface) SendEventClient {
	return &sendEventClient{cc}
}

func (c *sendEventClient) RequestMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/SendEvent/RequestMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendEventClient) FindEvents(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, "/SendEvent/FindEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendEventServer is the server API for SendEvent service.
// All implementations must embed UnimplementedSendEventServer
// for forward compatibility
type SendEventServer interface {
	RequestMessage(context.Context, *Request) (*Status, error)
	FindEvents(context.Context, *Empty) (*FindResponse, error)
	mustEmbedUnimplementedSendEventServer()
}

// UnimplementedSendEventServer must be embedded to have forward compatible implementations.
type UnimplementedSendEventServer struct {
}

func (UnimplementedSendEventServer) RequestMessage(context.Context, *Request) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMessage not implemented")
}
func (UnimplementedSendEventServer) FindEvents(context.Context, *Empty) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEvents not implemented")
}
func (UnimplementedSendEventServer) mustEmbedUnimplementedSendEventServer() {}

// UnsafeSendEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendEventServer will
// result in compilation errors.
type UnsafeSendEventServer interface {
	mustEmbedUnimplementedSendEventServer()
}

func RegisterSendEventServer(s grpc.ServiceRegistrar, srv SendEventServer) {
	s.RegisterService(&SendEvent_ServiceDesc, srv)
}

func _SendEvent_RequestMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendEventServer).RequestMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SendEvent/RequestMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendEventServer).RequestMessage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendEvent_FindEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendEventServer).FindEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SendEvent/FindEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendEventServer).FindEvents(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SendEvent_ServiceDesc is the grpc.ServiceDesc for SendEvent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendEvent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SendEvent",
	HandlerType: (*SendEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestMessage",
			Handler:    _SendEvent_RequestMessage_Handler,
		},
		{
			MethodName: "FindEvents",
			Handler:    _SendEvent_FindEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/events.proto",
}
